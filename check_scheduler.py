#!/usr/bin/env python3
"""
Script de v√©rification et gestion des t√¢ches planifi√©es InfoWatchdog
"""
import platform
import subprocess
import json
from pathlib import Path
from datetime import datetime

def check_cron_jobs():
    """V√©rifie les t√¢ches cron existantes"""
    try:
        result = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
        if result.returncode == 0:
            crontab_lines = result.stdout.split('\n')
            infowatchdog_jobs = [line for line in crontab_lines if 'InfoWatchdog' in line or 'run.py' in line]
            
            if infowatchdog_jobs:
                print("‚úÖ T√¢ches cron InfoWatchdog trouv√©es:")
                for job in infowatchdog_jobs:
                    print(f"   {job}")
                return True
            else:
                print("‚ùå Aucune t√¢che cron InfoWatchdog trouv√©e")
                return False
        else:
            print("‚ö†Ô∏è  Impossible de lire crontab")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification cron: {e}")
        return False

def check_systemd_services():
    """V√©rifie les services systemd"""
    try:
        # V√©rifie le service
        result = subprocess.run(['systemctl', 'status', 'infowatchdog.service'], 
                              capture_output=True, text=True)
        service_exists = result.returncode == 0
        
        # V√©rifie le timer
        result = subprocess.run(['systemctl', 'status', 'infowatchdog.timer'], 
                              capture_output=True, text=True)
        timer_exists = result.returncode == 0
        
        if service_exists and timer_exists:
            print("‚úÖ Service et timer systemd InfoWatchdog trouv√©s")
            
            # V√©rifie si le timer est actif
            result = subprocess.run(['systemctl', 'is-active', 'infowatchdog.timer'], 
                                  capture_output=True, text=True)
            if result.stdout.strip() == 'active':
                print("‚úÖ Timer systemd actif")
            else:
                print("‚ö†Ô∏è  Timer systemd inactif")
            
            return True
        else:
            print("‚ùå Service ou timer systemd InfoWatchdog non trouv√©")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification systemd: {e}")
        return False

def check_windows_tasks():
    """V√©rifie les t√¢ches planifi√©es Windows"""
    try:
        # PowerShell command pour lister les t√¢ches
        ps_command = 'Get-ScheduledTask -TaskName "*InfoWatchdog*" | Select-Object TaskName, State | ConvertTo-Json'
        
        result = subprocess.run(['powershell', '-Command', ps_command], 
                              capture_output=True, text=True)
        
        if result.returncode == 0 and result.stdout.strip():
            tasks = json.loads(result.stdout)
            if not isinstance(tasks, list):
                tasks = [tasks]
            
            print("‚úÖ T√¢ches Windows InfoWatchdog trouv√©es:")
            for task in tasks:
                state = "üü¢ Activ√©e" if task['State'] == 'Ready' else f"üî¥ {task['State']}"
                print(f"   {task['TaskName']}: {state}")
            return True
        else:
            print("‚ùå Aucune t√¢che Windows InfoWatchdog trouv√©e")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification Windows: {e}")
        return False

def check_last_execution():
    """V√©rifie la derni√®re ex√©cution en consultant les logs"""
    log_file = Path("logs/cron.log")
    
    if log_file.exists():
        try:
            with open(log_file, 'r') as f:
                lines = f.readlines()
            
            if lines:
                # Cherche la derni√®re ligne avec un timestamp
                for line in reversed(lines):
                    if "Collection Report:" in line or "Starting InfoWatchdog" in line:
                        print(f"üìÑ Derni√®re ex√©cution d√©tect√©e dans les logs")
                        print(f"   {line.strip()}")
                        break
                
                # Statistiques du fichier
                file_stats = log_file.stat()
                last_modified = datetime.fromtimestamp(file_stats.st_mtime)
                print(f"üìÖ Derni√®re modification des logs: {last_modified}")
                return True
            else:
                print("‚ö†Ô∏è  Fichier de logs vide")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la lecture des logs: {e}")
            return False
    else:
        print("‚ùå Fichier de logs non trouv√© (logs/cron.log)")
        return False

def remove_scheduled_tasks():
    """Supprime les t√¢ches planifi√©es"""
    system = platform.system().lower()
    
    if system in ['linux', 'darwin']:
        print("üóëÔ∏è  Suppression des t√¢ches cron...")
        try:
            # Lit le crontab actuel
            result = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
            if result.returncode == 0:
                lines = result.stdout.split('\n')
                # Filtre les lignes InfoWatchdog
                filtered_lines = [line for line in lines if 'InfoWatchdog' not in line and 'run.py' not in line]
                
                # R√©applique le crontab
                new_crontab = '\n'.join(filtered_lines)
                process = subprocess.Popen(['crontab', '-'], stdin=subprocess.PIPE, text=True)
                process.communicate(input=new_crontab)
                
                if process.returncode == 0:
                    print("‚úÖ T√¢ches cron supprim√©es")
                else:
                    print("‚ùå Erreur lors de la suppression des t√¢ches cron")
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
            
        # Systemd (Linux uniquement)
        if system == 'linux':
            print("\nüóëÔ∏è  Suppression du service systemd...")
            try:
                subprocess.run(['sudo', 'systemctl', 'stop', 'infowatchdog.timer'], check=False)
                subprocess.run(['sudo', 'systemctl', 'disable', 'infowatchdog.timer'], check=False)
                subprocess.run(['sudo', 'rm', '/etc/systemd/system/infowatchdog.service'], check=False)
                subprocess.run(['sudo', 'rm', '/etc/systemd/system/infowatchdog.timer'], check=False)
                subprocess.run(['sudo', 'systemctl', 'daemon-reload'], check=False)
                print("‚úÖ Service systemd supprim√©")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erreur systemd: {e}")
                
    elif system == 'windows':
        print("üóëÔ∏è  Suppression des t√¢ches Windows...")
        try:
            ps_command = 'Unregister-ScheduledTask -TaskName "InfoWatchdog" -Confirm:$false'
            result = subprocess.run(['powershell', '-Command', ps_command], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ T√¢che Windows supprim√©e")
            else:
                print("‚ùå Erreur lors de la suppression de la t√¢che Windows")
        except Exception as e:
            print(f"‚ùå Erreur: {e}")

def main():
    """Fonction principale"""
    print("üîç InfoWatchdog - V√©rification des t√¢ches planifi√©es")
    print("="*60)
    
    system = platform.system().lower()
    print(f"üñ•Ô∏è  Syst√®me: {platform.system()}")
    
    # V√©rification selon le syst√®me
    tasks_found = False
    
    if system in ['linux', 'darwin']:
        print("\nüìã V√©rification des t√¢ches cron...")
        tasks_found |= check_cron_jobs()
        
        if system == 'linux':
            print("\nüìã V√©rification des services systemd...")
            tasks_found |= check_systemd_services()
            
    elif system == 'windows':
        print("\nüìã V√©rification des t√¢ches Windows...")
        tasks_found |= check_windows_tasks()
    
    print("\nüìÑ V√©rification des logs d'ex√©cution...")
    check_last_execution()
    
    # Menu d'actions
    if tasks_found:
        print("\nüîß Actions disponibles:")
        print("1. Voir les logs r√©cents")
        print("2. Tester une ex√©cution manuelle")
        print("3. Supprimer toutes les t√¢ches planifi√©es")
        print("4. Quitter")
        
        choice = input("\nChoisissez une action (1-4): ").strip()
        
        if choice == "1":
            show_recent_logs()
        elif choice == "2":
            test_manual_execution()
        elif choice == "3":
            confirm = input("‚ö†Ô∏è  √ätes-vous s√ªr de vouloir supprimer toutes les t√¢ches ? (y/N): ")
            if confirm.lower() in ['y', 'yes', 'oui']:
                remove_scheduled_tasks()
        elif choice == "4":
            pass
    else:
        print("\nüí° Aucune t√¢che planifi√©e trouv√©e.")
        print("   Ex√©cutez 'python setup_scheduler.py' pour en cr√©er une.")

def show_recent_logs():
    """Affiche les logs r√©cents"""
    log_file = Path("logs/cron.log")
    if log_file.exists():
        try:
            with open(log_file, 'r') as f:
                lines = f.readlines()
            
            print("\nüìÑ 20 derni√®res lignes des logs:")
            print("="*60)
            for line in lines[-20:]:
                print(line.rstrip())
            print("="*60)
        except Exception as e:
            print(f"‚ùå Erreur lecture logs: {e}")
    else:
        print("‚ùå Fichier de logs non trouv√©")

def test_manual_execution():
    """Teste une ex√©cution manuelle"""
    print("\nüß™ Test d'ex√©cution manuelle...")
    try:
        result = subprocess.run([get_python_path(), "run.py", "--test-only"], 
                              capture_output=True, text=True)
        
        print("üì§ STDOUT:")
        print(result.stdout)
        
        if result.stderr:
            print("üì§ STDERR:")
            print(result.stderr)
            
        print(f"üìä Code de retour: {result.returncode}")
        
        if result.returncode == 0:
            print("‚úÖ Test r√©ussi")
        else:
            print("‚ùå Test √©chou√©")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")

def get_python_path():
    """Retourne le chemin Python (m√™me logique que setup_scheduler.py)"""
    from pathlib import Path
    import sys
    
    # Essaie de d√©tecter l'environnement virtuel
    venv_python = Path("venv/bin/python")
    if venv_python.exists():
        return str(venv_python.absolute())
    
    venv_python_alt = Path(".venv/bin/python")
    if venv_python_alt.exists():
        return str(venv_python_alt.absolute())
    
    # Windows
    venv_python_win = Path("venv/Scripts/python.exe")
    if venv_python_win.exists():
        return str(venv_python_win.absolute())
    
    venv_python_win_alt = Path(".venv/Scripts/python.exe")
    if venv_python_win_alt.exists():
        return str(venv_python_win_alt.absolute())
    
    return sys.executable

if __name__ == "__main__":
    main()